################################################################################
# ==> Main Tasks for fmw-domain Role
# ==> Creates a Domain with Fussion Middleware Infra software
# ==> Compatible with 12.2.1.3
# ==> author: Stavros Kalapothas
################################################################################

# ==> Create Repository in Database
- name: password response file for repository creation
  template: src=passwords.txt dest={{ mw_installer_folder }} owner={{ oracle_user }} group={{ oracle_group }}
- name: copy create repository script
  template: src=create_repo.sh dest={{ mw_installer_folder }} owner={{ oracle_user }} group={{ oracle_group }} mode=0755

- name: execute create repository script
  become: yes
  become_user: '{{ oracle_user }}'
  shell: "{{ mw_installer_folder }}/create_repo.sh"
  tags:
  - repo_exec
    
# ==> Create new domain
- name: copy create domain python script
  template: src=create-domain.py dest={{ mw_installer_folder }} owner={{ oracle_user }} group={{ oracle_group }}

- name: Execute create domain script
  become: yes
  become_user: '{{ oracle_user }}'
  shell: "{{ weblogic_home }}/common/bin/wlst.sh {{ mw_installer_folder }}/create-domain.py"
  tags:
  - repo_exec
    
# ==> Start nodemanager
- name: Create security directoy to Nodemanager Home
  file: state=directory path={{ nodemanager_home }}/security owner={{ oracle_user }} group={{ oracle_group }}

#- name: Copy DemoIdentity key store to nodemanager home
#  become: yes
#  become_user: '{{ oracle_user }}'
#  #command: 'cp {{ domain_home }}/security/DemoIdentity.jks {{ nodemanager_home }}/security/DemoIdentity.jks'
#  #command: 'cp /oracle/fmw12.1.3/product/Oracle_Home/wlserver/server/lib/DemoIdentity.jks {{ nodemanager_home }}/security/DemoIdentity.jks {{ domain_home }}/security/'
#  #command: 'for i in {{ nodemanager_home }}/security/ {{ domain_home }}/security/ ; do cp {{ middleware_home }}/wlserver/server/lib/DemoIdentity.jks $i; done'
#  #template: src={{ middleware_home }}/wlserver/server/lib/DemoIdentity.jks dest={{ nodemanager_home }}/security/ owner={{ oracle_user }} group={{ oracle_group }}
#  #template: src={{ middleware_home }}/wlserver/server/lib/DemoIdentity.jks dest={{ domain_home }}/security/ owner={{ oracle_user }} group={{ oracle_group }}
#  command: '{{ item }}'
#  with_items:
#    - cp {{ oracle_base }}/product/Oracle_Home/wlserver/server/lib/DemoIdentity.jks {{ domain_home }}/security/
#    - cp {{ oracle_base }}/product/Oracle_Home/wlserver/server/lib/DemoIdentity.jks {{ nodemanager_home }}/security/  
  
  #sudo_user: '{{ oracle_user }}'
- name: Copy Nodemanager Properties file
  template: src=nodemanager.properties dest={{ nodemanager_home }}/ owner={{ oracle_user }} group={{ oracle_group }}
      
# ==> Create startup script for nodemanager
#- name: Copy init.d startup script
#  template: src=files/nodemgr dest=/etc/init.d/ mode=0755
- name: Copy nodemanager systemd script
  template: src=nodemanager.service dest=/etc/systemd/system/ mode=0664
- name: Enable nodemanager as linux service
  command: 'systemctl enable nodemanager'
- name: Start Node Manager
  command: 'systemctl start nodemanager'
- name: Waiting for nodemanager to come up
  wait_for: port=5556 delay=2 timeout=30
    
# ==> Start AdminServer
- name: Create security folder on Admin Server
  file: state=directory path={{ domains_home }}/{{ domain_name }}/servers/{{ admin_server_name }}/security owner={{ oracle_user }} group={{ oracle_group }}
- name: Create boot.properties file
  template: src=boot.properties dest={{ domains_home }}/{{ domain_name }}/servers/{{ admin_server_name }}/security/ owner={{ oracle_user }} group={{ oracle_group }}
- name: Copy Admin Server start-up script
  template: src=start-admin-server.py dest={{ mw_installer_folder }} owner={{ oracle_user }} group={{ oracle_group }} mode=0755

- name: Execute start Admin Server script
  #shell: "{{ weblogic_home }}/common/bin/wlst.sh {{ mw_installer_folder }}/start-admin-server.py"
  become: yes
  become_user: '{{ oracle_user }}'
  shell: "nohup {{ domains_home }}/{{ domain_name }}/bin/startWebLogic.sh &"

  #sudo_user: '{{ oracle_user }}'
- name: Wait for Admin Server to startup
  wait_for: port={{ admin_server_port }} delay=2 timeout=300

# ==> Create Environment Variables for Oracle user
#- name: Creates new .bashrc file with system variables
#  template: src=.bashrc dest=/home/oracle/.bashrc
- name: Add Oracle Home environment variables
  lineinfile: dest='/home/{{ oracle_user }}/.bashrc' line='export ORACLE_HOME={{ middleware_home }}'
